<?xml version="1.0" encoding="UTF-8" ?>

<project name="genjar2-test" default="full" basedir=".">

    <property name="target-jar" value="build/${ant.project.name}-tmp.jar" />

    <target name="full" depends="clean,
        build.java,
        test.ex.1,
        test.ex.2,
        test.ex.3,
        test.class.1,
        test.class.2,
        test.class.3,
        test.class.4,
        test.classfilter.1,
        test.classfilter.2,
        test.fileset.1,
        test.fileset.2,
        test.zipfileset.1,
        test.zipfileset.2,
        test.zipfileset.3,
        test.zipgroupfileset.1,
        test.manifest.1,
        test.manifest.2,
        test.sign.jar,
        test.classpath.1,
        test.locking.1,
        test.profile" />

    <target name="init">
        <taskdef file="etc/genjar.properties">
            <classpath location="../build/classes" />
        </taskdef>
        <mkdir dir="build/lib" />
    </target>

    <target name="build.java">
        <mkdir dir="build/classes" />
        <javac srcdir="src" destdir="build/classes" debug="true">
            <classpath>
                <fileset dir="../lib" includes="*.jar" />
                <fileset dir="etc" includes="test3.jar" />
            </classpath>
        </javac>
        <jar destfile="etc/test-classes.jar">
            <!-- Ensure that one of the inner classes is listed first in the jar -->
            <fileset dir="build/classes" includes="package3/subpackage/Class6$Inner$1.class,package3/subpackage/*.class" />
        </jar>
    </target>

    <!-- Tests attempt use task with out destfile or destdir attribute -->
    <target name="test.ex.1" depends="init">
        <genjar />
    </target>

    <!-- Tests attempt to load file attribute and fileset for same resource element -->
    <target name="test.ex.2" depends="init">
        <genjar destfile="${target-jar}">
            <fileset file="package2">
                <fileset dir="etc" includes="*" />
            </fileset>
        </genjar>
    </target>

    <!-- Tests attempt to specify both a file and dir for the zipfileset element. -->
    <target name="test.ex.3" depends="init">
        <genjar destfile="${target-jar}">
            <zipfileset src="etc/xbean_xpath.jar" dir="build/lib" />
        </genjar>
    </target>

    <!-- Tests simple class dependency building -->
    <target name="test.class.1" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class2" />
            <classpath location="build/classes" />
        </genjar>
    </target>

    <!-- Tests class dependency building with classes as method params -->
    <target name="test.class.2" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package2.Class5" />
            <classpath location="build/classes" />
        </genjar>
    </target>

    <!-- Tests class dependency building with a fileset in <class> -->
    <target name="test.class.3" depends="init">
        <genjar destfile="${target-jar}">
            <class>
                <fileset dir="build/classes" includes="package1/*" />
            </class>
            <classpath location="build/classes" />
        </genjar>
    </target>

    <!-- Tests class dependency building with inner classes -->
    <target name="test.class.4" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package3.Class7" />
            <classpath location="build/classes" />
        </genjar>
    </target>

    <!-- Tests the include / exclude for classfilters -->
    <target name="test.classfilter.1" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <classpath location="${java.home}/lib/rt.jar" />
            <classfilter>
                <include name="java.util.ArrayList" />
                <exclude name="package2" />
            </classfilter>
        </genjar>
    </target>

    <!-- Tests the include / exclude for classfilters -->
    <target name="test.classfilter.2" depends="init">
        <property name="flag1" value="true" />
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <classpath location="${java.home}/lib/rt.jar" />
            <classfilter>
                <include name="java.util.ArrayList" unless="flag1" />
                <exclude name="package2" if="flag2" />
                <exclude name="package1.Class2" if="flag1" />
            </classfilter>
        </genjar>
    </target>

    <!-- Tests the fileset 'includes' and 'excludes' attributes -->
    <target name="test.fileset.1" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class1" />
            <classpath location="build/classes" />

            <fileset dir="etc" includes="genjar.properties" />
            <fileset dir="etc" includes="file.properties" />
            <fileset dir="src" includes="**/*.png" excludes="**/sawfish-m*.png" />
        </genjar>
    </target>

    <!-- Tests fileset elements with file attributes -->
    <target name="test.fileset.2" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class1" />
            <classpath location="build/classes" />
            <fileset file="etc/genjar.properties" />
            <fileset file="etc/file.properties" />
            <fileset file="src/package1/imagedir1/sawfish-logo.png" />
        </genjar>
    </target>

    <!-- Tests zipfileset file inclusion to jar with duplicate entries and jar index creation -->
    <target name="test.zipfileset.1" depends="init">
        <genjar destfile="${target-jar}" filesetmanifest="merge">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <zipfileset src="etc/test1.zip" />
            <zipfileset src="etc/xbean_xpath.jar" />
        </genjar>
    </target>

    <!-- Tests the zipfileset 'includes' attribute -->
    <target name="test.zipfileset.2" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <zipfileset src="etc/xbean_xpath.jar" includes="**/XBeansX*.class" />
        </genjar>
    </target>

    <!-- Tests the zipfileset 'excludes' attribute -->
    <target name="test.zipfileset.3" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <zipfileset src="etc/xbean_xpath.jar" excludes="**/XBeansX.class" />
        </genjar>
    </target>

    <!-- Tests including a required jar using zipfileset. If we're including the 
         entire jar, the build should succeed even if the jar isn't listed 
         explicitly in the classpath -->
    <target name="test.zipfileset.4" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package4.Class8" />
            <classpath location="build/classes" />
            <zipfileset src="etc/test3.jar" includes="package4/**/*.class" />
        </genjar>
    </target>

    <!-- Tests excluding a required class (even though it's in a jar included via 
         zipfileset). We expect this build to fail. -->
    <target name="test.zipfileset.5" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package4.Class8" />
            <classpath location="build/classes" />
            <zipfileset src="etc/test3.jar" excludes="package4/**/*.class" />
        </genjar>
    </target>


    <!-- Tests zipgroupfileset inclusion -->
    <target name="test.zipgroupfileset.1" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="build/classes" />
            <zipgroupfileset dir="etc" includes="test1.zip,test2.jar" />
        </genjar>
    </target>

    <!-- Tests zipgroupfileset including a jar with signatures in the manifest -->
    <target name="test.zipgroupfileset.2" depends="init">
        <genjar destfile="${target-jar}">
            <zipgroupfileset dir="etc" includes="test1.zip,xbean_xpath.jar" />
        </genjar>
    </target>

    <!-- Tests manifest generation -->
    <target name="test.manifest.1" depends="init">
        <genjar destfile="${target-jar}">
            <manifest>
                <attribute name="Built-By" value="${ant.project.name}" />
                <attribute name="Extension-name" value="${ant.project.name}" />
            </manifest>
        </genjar>
    </target>

    <!-- Tests manifest inclusion and merging -->
    <target name="test.manifest.2" depends="init">
        <genjar destfile="${target-jar}" manifest="etc/MANIFEST.MF1">
            <manifest>
                <attribute name="Built-By2" value="${ant.project.name}2" />
                <attribute name="Extension-name2" value="${ant.project.name}2" />
            </manifest>
        </genjar>
    </target>

    <!-- Tests that GenJar generated file pass the jarsigner -verify option -->
    <target name="test.sign.jar" depends="test.zipfileset.1">
        <!--
        <genkey
            alias="genjar"
            storepass="genjar"
            keystore="etc/myKeystore"
            dname="CN=GenJar, OU=Jesse, O=Sourceforge.net, C=CA"
        />
-->
        <signjar alias="genjar" storepass="genjar" keystore="etc/myKeystore" jar="build/lib/${ant.project.name}-L2.jar">
        </signjar>

        <apply executable="${java.home}/../bin/jarsigner" os="Linux, Windows 2000">
            <arg value="-verify" />
            <srcfile />
            <fileset dir="build/lib" includes="${ant.project.name}-L2.jar" />
        </apply>

        <apply executable="jarsigner" os="Mac OS X">
            <arg value="-verify" />
            <srcfile />
            <fileset dir="build/lib" includes="${ant.project.name}-L2.jar" />
        </apply>
        <!--
        <delete file="etc/myKeystore"/>
-->
    </target>

    <!-- Tests the classpath resolvers, including specifying a jar file with an uppercase suffix -->
    <target name="test.classpath.1" depends="init">
        <genjar destfile="${target-jar}">
            <class name="package1.Class3" />
            <classpath location="etc/test3.JAR" />
        </genjar>
    </target>

    <!-- Makes sure GenJar is not keeping files open (locked) -->
    <!-- This test only ever failed on Windows -->
    <target name="test.locking.1" depends="init">
        <mkdir dir="build/Lock" />
        <jar destfile="build/Lock/jar1.jar" includes="package1.Class1" basedir="build/classes" />
        <genjar jarfile="build/Lock/jar2.jar">
            <class name="package1.Class2" />
            <classpath>
                <pathelement location="build/Lock/jar1.jar" />
                <pathelement location="build/classes" />
            </classpath>
        </genjar>
        <delete file="build/Lock/jar1.jar" />
        <delete file="build/Lock/jar2.jar" />
    </target>
    
    <target name="test.genjar.jar" depends="init">
        <genjar destfile="${target-jar}">
            <class name="net.sf.genjar.GenJar"/>
            <classpath>
                <pathelement location="../build"/>
                <fileset dir="../lib" includes="**/*.jar" />
            </classpath>
            <classfilter>
                <include name="net.sf.genjar"/>
                <exclude name="org.apache.tools.ant"/>
            </classfilter>
            <fileset file="../etc/genjar.properties"/>
        </genjar>
    </target>

    <target name="test.profile" depends="init">
        <genjar destfile="${target-jar}" update="false">
            <class name="profile.Foo" />
            <class name="profile.A" />

            <classpath location="build" />

            <classfilter>
                <include name="profile.Bar" />
                <exclude name="profile.A" />
            </classfilter>

            <fileset dir="src" includes="profile/Foo2.java" />
            <zipfileset src="lib/jsr173_api.jar" />
            <zipfileset src="lib/xmlschema-genjar.jar" />

            <manifest>
                <attribute name="Main-Class" value="genjar.Foo" />
            </manifest>
        </genjar>
    </target>

    <target name="test.cfs" depends="init">
        <classfileset id="reqdClasses" dir="." file="build/classes/package2/Class4*">
            <root classname="package1.Class3" />
        </classfileset>
        <pathconvert pathsep="," property="prop" refid="reqdClasses" />
        <echo>The deps: ${prop}</echo>
    </target>

    <!--
    ============================================================================
        Remove all files generated by build process.
    ============================================================================
    -->
    <target name="clean">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="build">
                <exclude name="classes/**/*" />
                <include name="**/*" />
            </fileset>
        </delete>
    </target>

</project>
